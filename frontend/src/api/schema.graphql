# GraphQL Schema for VeryPay Merchant API

scalar Date
scalar JSON

# Enums
enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

enum NotificationType {
  TRANSACTION
  SYSTEM
  PROMOTION
  ALERT
}

enum UserRole {
  MERCHANT
  ADMIN
  USER
}

# Input Types
input CreateTransactionInput {
  to: String!
  amount: String!
  token: String!
  orderId: String
  customerInfo: CustomerInfoInput
  items: [OrderItemInput!]
}

input CustomerInfoInput {
  email: String
  name: String
  address: String
}

input OrderItemInput {
  id: String!
  name: String!
  quantity: Int!
  price: String!
}

input QRCodeInput {
  amount: String!
  token: String!
  orderId: String
  expiresIn: Int
}

input AnalyticsInput {
  period: String!
  startDate: Date
  endDate: Date
  tokenFilter: [String!]
}

input UpdateMerchantSettingsInput {
  acceptedTokens: [String!]
  webhookUrl: String
  notificationPreferences: NotificationPreferencesInput
  paymentSettings: PaymentSettingsInput
}

input NotificationPreferencesInput {
  email: Boolean!
  push: Boolean!
  webhook: Boolean!
  transactionAlerts: Boolean!
  dailySummary: Boolean!
}

input PaymentSettingsInput {
  confirmationsRequired: Int!
  autoConfirmThreshold: Float!
  slippageTolerance: Float!
}

# Response Types
type ApiResponse {
  success: Boolean!
  message: String
  timestamp: String!
}

type PaginationInfo {
  page: Int!
  limit: Int!
  total: Int!
  pages: Int!
}

# Core Types
type User {
  id: ID!
  email: String!
  walletAddress: String!
  merchantId: String
  role: UserRole!
  isVerified: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type AuthResponse {
  user: User!
  tokens: AuthTokens!
}

type AuthTokens {
  accessToken: String!
  refreshToken: String!
  expiresIn: Int!
}

type Merchant {
  id: ID!
  userId: String!
  businessName: String!
  businessType: String!
  walletAddress: String!
  isActive: Boolean!
  settings: MerchantSettings!
  analytics: MerchantAnalytics!
  createdAt: Date!
  updatedAt: Date!
}

type MerchantSettings {
  acceptedTokens: [String!]!
  webhookUrl: String
  notificationPreferences: NotificationPreferences!
  paymentSettings: PaymentSettings!
}

type NotificationPreferences {
  email: Boolean!
  push: Boolean!
  webhook: Boolean!
  transactionAlerts: Boolean!
  dailySummary: Boolean!
}

type PaymentSettings {
  confirmationsRequired: Int!
  autoConfirmThreshold: Float!
  slippageTolerance: Float!
}

type Transaction {
  id: ID!
  merchantId: String!
  hash: String!
  from: String!
  to: String!
  amount: String!
  token: String!
  status: TransactionStatus!
  confirmations: Int!
  blockNumber: Int
  gasUsed: String
  gasPrice: String
  metadata: TransactionMetadata!
  createdAt: Date!
  confirmedAt: Date
}

type TransactionMetadata {
  orderId: String
  customerInfo: CustomerInfo
  items: [OrderItem!]
  receiptUrl: String
}

type CustomerInfo {
  email: String
  name: String
  address: String
}

type OrderItem {
  id: String!
  name: String!
  quantity: Int!
  price: String!
}

type MerchantAnalytics {
  totalTransactions: Int!
  totalVolume: String!
  averageTransaction: String!
  successRate: Float!
  topTokens: [TokenAnalytics!]!
  periodStats: PeriodStats!
  revenueStats: RevenueStats!
}

type TokenAnalytics {
  token: String!
  volume: String!
  count: Int!
  percentage: Float!
}

type PeriodStats {
  daily: StatsPeriod!
  weekly: StatsPeriod!
  monthly: StatsPeriod!
}

type StatsPeriod {
  volume: String!
  count: Int!
  change: Float!
}

type RevenueStats {
  totalRevenue: String!
  projectedRevenue: String!
  revenueGrowth: Float!
}

type TokenInfo {
  address: String!
  symbol: String!
  name: String!
  decimals: Int!
  logoUrl: String
  isStablecoin: Boolean!
}

type QRCodeResponse {
  qrCode: String!
  paymentUrl: String!
  expiresAt: Date!
  data: JSON!
}

type Notification {
  id: ID!
  userId: String!
  type: NotificationType!
  title: String!
  message: String!
  data: JSON
  isRead: Boolean!
  createdAt: Date!
}

type GasEstimate {
  gasPrice: String!
  gasLimit: String!
  estimatedFee: String!
}

type TransactionPage {
  transactions: [Transaction!]!
  pagination: PaginationInfo!
}

type NotificationPage {
  notifications: [Notification!]!
  pagination: PaginationInfo!
}

# Queries
type Query {
  # User & Auth
  me: User
  
  # Merchant
  merchant(id: ID): Merchant
  merchants(limit: Int, offset: Int): [Merchant!]!
  
  # Transactions
  transaction(id: ID!): Transaction
  transactions(
    merchantId: String
    status: TransactionStatus
    limit: Int = 10
    offset: Int = 0
  ): TransactionPage!
  
  transactionByHash(hash: String!): Transaction
  
  # Analytics
  analytics(input: AnalyticsInput!): MerchantAnalytics!
  
  # Tokens
  tokenInfo(address: String!): TokenInfo!
  supportedTokens: [TokenInfo!]!
  
  # Notifications
  notifications(
    userId: String!
    type: NotificationType
    limit: Int = 10
    offset: Int = 0
  ): NotificationPage!
  
  unreadNotificationCount(userId: String!): Int!
  
  # Blockchain
  gasEstimate(to: String!, value: String!, data: String): GasEstimate!
  blockNumber: Int!
}

# Mutations
type Mutations {
  # Auth
  login(email: String!, password: String!): AuthResponse!
  register(email: String!, password: String!, walletAddress: String!): AuthResponse!
  refreshToken(refreshToken: String!): AuthTokens!
  logout: ApiResponse!
  
  # Merchant
  createMerchant(
    businessName: String!
    businessType: String!
    walletAddress: String!
  ): Merchant!
  
  updateMerchantSettings(input: UpdateMerchantSettingsInput!): Merchant!
  
  # Transactions
  createTransaction(input: CreateTransactionInput!): Transaction!
  cancelTransaction(id: ID!): Transaction!
  
  # QR Codes
  generatePaymentQR(input: QRCodeInput!): QRCodeResponse!
  
  # Notifications
  markNotificationRead(id: ID!): Notification!
  markAllNotificationsRead(userId: String!): ApiResponse!
  deleteNotification(id: ID!): ApiResponse!
  
  # Webhook testing
  testWebhook(merchantId: String!): ApiResponse!
}

# Subscriptions
type Subscription {
  # Real-time transaction updates
  transactionUpdated(merchantId: String!): Transaction!
  
  # Real-time notifications
  notificationReceived(userId: String!): Notification!
  
  # Real-time analytics updates
  analyticsUpdated(merchantId: String!): MerchantAnalytics!
  
  # Real-time balance updates
  balanceUpdated(walletAddress: String!): String!
}